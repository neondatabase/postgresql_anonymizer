---
spec:
  inputs:
    always:    # Optional
      type: string
      default: ''
      description: |
        If the variable is defined, then all the jobs are launched in any case.
        Usually you'd want at least 1 major version to be built/tested on all
        pipelines.
    pgver:     # Mandatory
      type: string
      description: |
        The PostgreSQL major version with the "pg" prefix
        (e.g. `pg13`, pg16`, etc.).

---

##
## B U I L D
##

# `cargo pgrx test` will :
#    - build the extension
#    - launch a Postgres instance
#    - run the unit tests against it.
#
# The functional tests will be launched later with pg_regress
#
"build-$[[ inputs.pgver ]]":
  stage: build
  image: registry.gitlab.com/dalibo/postgresql_anonymizer:pgrx
  variables:
    PGVER: $[[ inputs.pgver ]]
    ALWAYS: $[[ inputs.always ]]
  script:
    # lint only for the default PG version
    - test -z "${ALWAYS}" || make lint
    # Build the extension package
    - make
    # Launch a postgres instance and run the unit tests
    # The functional tests will be launched later with pg_regress
    - make test
    # At this point we can build the packages too
    - make deb
    - make rpm
  rules:
    - if: $ALWAYS
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  artifacts:
    paths:
      - target/release/anon-$[[ inputs.pgver ]]
    expire_in: 1 day

##
## T E S T
##

#
# Installcheck-pg13 will :
#   - install the binaries from the build job
#   - start a postgres instance
#   - run the functional tests with pg_regress
#
"installcheck-$[[ inputs.pgver ]]":
  stage: test
  dependencies:
    - build-$[[ inputs.pgver ]]
  image: registry.gitlab.com/dalibo/postgresql_anonymizer:pgrx
  variables:
    PGVER: $[[ inputs.pgver ]]
    ALWAYS: $[[ inputs.always ]]
  script:
    - make install
    - make installcheck
  rules:
    - if: $ALWAYS
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  artifacts:
    paths:
      - target/release/anon-$[[ inputs.pgver ]]
      - results
    expire_in: 1 day

##
## D E P L O Y
##

"upload-packages-$[[ inputs.pgver ]]":
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG != null'
      when: always
    - when: manual
      allow_failure: true
  image: curlimages/curl:latest
  dependencies:
    - "build-$[[ inputs.pgver ]]"
  variables:
    GENERIC_URL: "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic"
    DEB_REGISTRY_URL: "$GENERIC_URL/deb/$CI_COMMIT_REF_NAME"
    RPM_REGISTRY_URL: "$GENERIC_URL/rpm/$CI_COMMIT_REF_NAME"
  script:
    - cd "target/release/anon-$[[ inputs.pgver ]]"
    - 'curl --fail --header "JOB-TOKEN:$CI_JOB_TOKEN" --upload-file *.deb "$DEB_REGISTRY_URL/postgresql_anonymizer_$[[ inputs.pgver ]]-$CI_COMMIT_REF_NAME.amd64.deb?select=package_file"'
    - 'curl --fail --header "JOB-TOKEN:$CI_JOB_TOKEN" --upload-file *.rpm "$RPM_REGISTRY_URL/postgresql_anonymizer_$[[ inputs.pgver ]]-$CI_COMMIT_REF_NAME.x86_64.rpm?select=package_file"'

##
## R E L E A S E
##

"release-packages-$[[ inputs.pgver ]]":
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
  script:
    - echo "running release_job"
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'RPM package for $[[ inputs.pgver ]] (x64_64)'
          url: '$RPM_REGISTRY_URL/postgresql_anonymizer_$[[ inputs.pgver ]]-$CI_COMMIT_REF_NAME.x86_64.rpm'
          link_type: 'package'
          filepath: 'postgresql_anonymizer_$[[ inputs.pgver ]]-$CI_COMMIT_REF_NAME.x86_64.rpm'
        - name: 'DEB package for $[[ inputs.pgver ]] (x64_64)'
          url: '$DEB_REGISTRY_URL/postgresql_anonymizer_$[[ inputs.pgver ]]-$CI_COMMIT_REF_NAME.amd64.deb'
          link_type: 'package'
          filepath: 'postgresql_anonymizer_$[[ inputs.pgver ]]-$CI_COMMIT_REF_NAME.amd64.deb'
